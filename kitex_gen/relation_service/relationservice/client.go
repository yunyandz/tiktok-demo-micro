// Code generated by Kitex v0.3.2. DO NOT EDIT.

package relationservice

import (
	"context"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/callopt"
	"github.com/yunyandz/tiktok-demo-micro/kitex_gen/user"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	FollowUser(ctx context.Context, Req *user.FollowUserRequest, callOptions ...callopt.Option) (r *user.UserResponse, err error)
	UnFollowUser(ctx context.Context, Req *user.UnFollowUserRequest, callOptions ...callopt.Option) (r *user.UserResponse, err error)
	GetFollowUserList(ctx context.Context, Req *user.GetFollowUserListRequest, callOptions ...callopt.Option) (r *user.UserListResponse, err error)
	GetFollowerUserList(ctx context.Context, Req *user.GetFollowerUserListRequest, callOptions ...callopt.Option) (r *user.UserListResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kRelationServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kRelationServiceClient struct {
	*kClient
}

func (p *kRelationServiceClient) FollowUser(ctx context.Context, Req *user.FollowUserRequest, callOptions ...callopt.Option) (r *user.UserResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FollowUser(ctx, Req)
}

func (p *kRelationServiceClient) UnFollowUser(ctx context.Context, Req *user.UnFollowUserRequest, callOptions ...callopt.Option) (r *user.UserResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UnFollowUser(ctx, Req)
}

func (p *kRelationServiceClient) GetFollowUserList(ctx context.Context, Req *user.GetFollowUserListRequest, callOptions ...callopt.Option) (r *user.UserListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFollowUserList(ctx, Req)
}

func (p *kRelationServiceClient) GetFollowerUserList(ctx context.Context, Req *user.GetFollowerUserListRequest, callOptions ...callopt.Option) (r *user.UserListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFollowerUserList(ctx, Req)
}
