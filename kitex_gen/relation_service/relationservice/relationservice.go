// Code generated by Kitex v0.3.2. DO NOT EDIT.

package relationservice

import (
	"context"
	"fmt"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/kitex/pkg/streaming"
	"github.com/yunyandz/tiktok-demo-micro/kitex_gen/relation_service"
	"github.com/yunyandz/tiktok-demo-micro/kitex_gen/user"
	"google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return relationServiceServiceInfo
}

var relationServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "RelationService"
	handlerType := (*relation_service.RelationService)(nil)
	methods := map[string]kitex.MethodInfo{
		"FollowUser":          kitex.NewMethodInfo(followUserHandler, newFollowUserArgs, newFollowUserResult, false),
		"UnFollowUser":        kitex.NewMethodInfo(unFollowUserHandler, newUnFollowUserArgs, newUnFollowUserResult, false),
		"GetFollowUserList":   kitex.NewMethodInfo(getFollowUserListHandler, newGetFollowUserListArgs, newGetFollowUserListResult, false),
		"GetFollowerUserList": kitex.NewMethodInfo(getFollowerUserListHandler, newGetFollowerUserListArgs, newGetFollowerUserListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "relation_service",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.3.2",
		Extra:           extra,
	}
	return svcInfo
}

func followUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.FollowUserRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation_service.RelationService).FollowUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *FollowUserArgs:
		success, err := handler.(relation_service.RelationService).FollowUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FollowUserResult)
		realResult.Success = success
	}
	return nil
}
func newFollowUserArgs() interface{} {
	return &FollowUserArgs{}
}

func newFollowUserResult() interface{} {
	return &FollowUserResult{}
}

type FollowUserArgs struct {
	Req *user.FollowUserRequest
}

func (p *FollowUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in FollowUserArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *FollowUserArgs) Unmarshal(in []byte) error {
	msg := new(user.FollowUserRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FollowUserArgs_Req_DEFAULT *user.FollowUserRequest

func (p *FollowUserArgs) GetReq() *user.FollowUserRequest {
	if !p.IsSetReq() {
		return FollowUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FollowUserArgs) IsSetReq() bool {
	return p.Req != nil
}

type FollowUserResult struct {
	Success *user.UserResponse
}

var FollowUserResult_Success_DEFAULT *user.UserResponse

func (p *FollowUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in FollowUserResult")
	}
	return proto.Marshal(p.Success)
}

func (p *FollowUserResult) Unmarshal(in []byte) error {
	msg := new(user.UserResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FollowUserResult) GetSuccess() *user.UserResponse {
	if !p.IsSetSuccess() {
		return FollowUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FollowUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UserResponse)
}

func (p *FollowUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func unFollowUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UnFollowUserRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation_service.RelationService).UnFollowUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UnFollowUserArgs:
		success, err := handler.(relation_service.RelationService).UnFollowUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UnFollowUserResult)
		realResult.Success = success
	}
	return nil
}
func newUnFollowUserArgs() interface{} {
	return &UnFollowUserArgs{}
}

func newUnFollowUserResult() interface{} {
	return &UnFollowUserResult{}
}

type UnFollowUserArgs struct {
	Req *user.UnFollowUserRequest
}

func (p *UnFollowUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in UnFollowUserArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *UnFollowUserArgs) Unmarshal(in []byte) error {
	msg := new(user.UnFollowUserRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UnFollowUserArgs_Req_DEFAULT *user.UnFollowUserRequest

func (p *UnFollowUserArgs) GetReq() *user.UnFollowUserRequest {
	if !p.IsSetReq() {
		return UnFollowUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UnFollowUserArgs) IsSetReq() bool {
	return p.Req != nil
}

type UnFollowUserResult struct {
	Success *user.UserResponse
}

var UnFollowUserResult_Success_DEFAULT *user.UserResponse

func (p *UnFollowUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in UnFollowUserResult")
	}
	return proto.Marshal(p.Success)
}

func (p *UnFollowUserResult) Unmarshal(in []byte) error {
	msg := new(user.UserResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UnFollowUserResult) GetSuccess() *user.UserResponse {
	if !p.IsSetSuccess() {
		return UnFollowUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UnFollowUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UserResponse)
}

func (p *UnFollowUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getFollowUserListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.GetFollowUserListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation_service.RelationService).GetFollowUserList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFollowUserListArgs:
		success, err := handler.(relation_service.RelationService).GetFollowUserList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFollowUserListResult)
		realResult.Success = success
	}
	return nil
}
func newGetFollowUserListArgs() interface{} {
	return &GetFollowUserListArgs{}
}

func newGetFollowUserListResult() interface{} {
	return &GetFollowUserListResult{}
}

type GetFollowUserListArgs struct {
	Req *user.GetFollowUserListRequest
}

func (p *GetFollowUserListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetFollowUserListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetFollowUserListArgs) Unmarshal(in []byte) error {
	msg := new(user.GetFollowUserListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFollowUserListArgs_Req_DEFAULT *user.GetFollowUserListRequest

func (p *GetFollowUserListArgs) GetReq() *user.GetFollowUserListRequest {
	if !p.IsSetReq() {
		return GetFollowUserListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFollowUserListArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetFollowUserListResult struct {
	Success *user.UserListResponse
}

var GetFollowUserListResult_Success_DEFAULT *user.UserListResponse

func (p *GetFollowUserListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetFollowUserListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetFollowUserListResult) Unmarshal(in []byte) error {
	msg := new(user.UserListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFollowUserListResult) GetSuccess() *user.UserListResponse {
	if !p.IsSetSuccess() {
		return GetFollowUserListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFollowUserListResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UserListResponse)
}

func (p *GetFollowUserListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getFollowerUserListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.GetFollowerUserListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation_service.RelationService).GetFollowerUserList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFollowerUserListArgs:
		success, err := handler.(relation_service.RelationService).GetFollowerUserList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFollowerUserListResult)
		realResult.Success = success
	}
	return nil
}
func newGetFollowerUserListArgs() interface{} {
	return &GetFollowerUserListArgs{}
}

func newGetFollowerUserListResult() interface{} {
	return &GetFollowerUserListResult{}
}

type GetFollowerUserListArgs struct {
	Req *user.GetFollowerUserListRequest
}

func (p *GetFollowerUserListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetFollowerUserListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetFollowerUserListArgs) Unmarshal(in []byte) error {
	msg := new(user.GetFollowerUserListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFollowerUserListArgs_Req_DEFAULT *user.GetFollowerUserListRequest

func (p *GetFollowerUserListArgs) GetReq() *user.GetFollowerUserListRequest {
	if !p.IsSetReq() {
		return GetFollowerUserListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFollowerUserListArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetFollowerUserListResult struct {
	Success *user.UserListResponse
}

var GetFollowerUserListResult_Success_DEFAULT *user.UserListResponse

func (p *GetFollowerUserListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetFollowerUserListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetFollowerUserListResult) Unmarshal(in []byte) error {
	msg := new(user.UserListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFollowerUserListResult) GetSuccess() *user.UserListResponse {
	if !p.IsSetSuccess() {
		return GetFollowerUserListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFollowerUserListResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UserListResponse)
}

func (p *GetFollowerUserListResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) FollowUser(ctx context.Context, Req *user.FollowUserRequest) (r *user.UserResponse, err error) {
	var _args FollowUserArgs
	_args.Req = Req
	var _result FollowUserResult
	if err = p.c.Call(ctx, "FollowUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UnFollowUser(ctx context.Context, Req *user.UnFollowUserRequest) (r *user.UserResponse, err error) {
	var _args UnFollowUserArgs
	_args.Req = Req
	var _result UnFollowUserResult
	if err = p.c.Call(ctx, "UnFollowUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowUserList(ctx context.Context, Req *user.GetFollowUserListRequest) (r *user.UserListResponse, err error) {
	var _args GetFollowUserListArgs
	_args.Req = Req
	var _result GetFollowUserListResult
	if err = p.c.Call(ctx, "GetFollowUserList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowerUserList(ctx context.Context, Req *user.GetFollowerUserListRequest) (r *user.UserListResponse, err error) {
	var _args GetFollowerUserListArgs
	_args.Req = Req
	var _result GetFollowerUserListResult
	if err = p.c.Call(ctx, "GetFollowerUserList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
