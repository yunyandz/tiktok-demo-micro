// Code generated by Kitex v0.3.2. DO NOT EDIT.

package videoservice

import (
	"context"
	"fmt"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/kitex/pkg/streaming"
	"github.com/yunyandz/tiktok-demo-micro/kitex_gen/response"
	"github.com/yunyandz/tiktok-demo-micro/kitex_gen/video"
	"github.com/yunyandz/tiktok-demo-micro/kitex_gen/video_service"
	"google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

var videoServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*video_service.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{
		"LikeVideo":          kitex.NewMethodInfo(likeVideoHandler, newLikeVideoArgs, newLikeVideoResult, false),
		"DislikeVideo":       kitex.NewMethodInfo(dislikeVideoHandler, newDislikeVideoArgs, newDislikeVideoResult, false),
		"GetUserVideos":      kitex.NewMethodInfo(getUserVideosHandler, newGetUserVideosArgs, newGetUserVideosResult, false),
		"GetUserLikedVideos": kitex.NewMethodInfo(getUserLikedVideosHandler, newGetUserLikedVideosArgs, newGetUserLikedVideosResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "video_service",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.3.2",
		Extra:           extra,
	}
	return svcInfo
}

func likeVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(video.LikeVideoRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(video_service.VideoService).LikeVideo(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *LikeVideoArgs:
		success, err := handler.(video_service.VideoService).LikeVideo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*LikeVideoResult)
		realResult.Success = success
	}
	return nil
}
func newLikeVideoArgs() interface{} {
	return &LikeVideoArgs{}
}

func newLikeVideoResult() interface{} {
	return &LikeVideoResult{}
}

type LikeVideoArgs struct {
	Req *video.LikeVideoRequest
}

func (p *LikeVideoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in LikeVideoArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *LikeVideoArgs) Unmarshal(in []byte) error {
	msg := new(video.LikeVideoRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var LikeVideoArgs_Req_DEFAULT *video.LikeVideoRequest

func (p *LikeVideoArgs) GetReq() *video.LikeVideoRequest {
	if !p.IsSetReq() {
		return LikeVideoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *LikeVideoArgs) IsSetReq() bool {
	return p.Req != nil
}

type LikeVideoResult struct {
	Success *response.Response
}

var LikeVideoResult_Success_DEFAULT *response.Response

func (p *LikeVideoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in LikeVideoResult")
	}
	return proto.Marshal(p.Success)
}

func (p *LikeVideoResult) Unmarshal(in []byte) error {
	msg := new(response.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *LikeVideoResult) GetSuccess() *response.Response {
	if !p.IsSetSuccess() {
		return LikeVideoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *LikeVideoResult) SetSuccess(x interface{}) {
	p.Success = x.(*response.Response)
}

func (p *LikeVideoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func dislikeVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(video.DislikeVideoRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(video_service.VideoService).DislikeVideo(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DislikeVideoArgs:
		success, err := handler.(video_service.VideoService).DislikeVideo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DislikeVideoResult)
		realResult.Success = success
	}
	return nil
}
func newDislikeVideoArgs() interface{} {
	return &DislikeVideoArgs{}
}

func newDislikeVideoResult() interface{} {
	return &DislikeVideoResult{}
}

type DislikeVideoArgs struct {
	Req *video.DislikeVideoRequest
}

func (p *DislikeVideoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in DislikeVideoArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *DislikeVideoArgs) Unmarshal(in []byte) error {
	msg := new(video.DislikeVideoRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DislikeVideoArgs_Req_DEFAULT *video.DislikeVideoRequest

func (p *DislikeVideoArgs) GetReq() *video.DislikeVideoRequest {
	if !p.IsSetReq() {
		return DislikeVideoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DislikeVideoArgs) IsSetReq() bool {
	return p.Req != nil
}

type DislikeVideoResult struct {
	Success *response.Response
}

var DislikeVideoResult_Success_DEFAULT *response.Response

func (p *DislikeVideoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in DislikeVideoResult")
	}
	return proto.Marshal(p.Success)
}

func (p *DislikeVideoResult) Unmarshal(in []byte) error {
	msg := new(response.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DislikeVideoResult) GetSuccess() *response.Response {
	if !p.IsSetSuccess() {
		return DislikeVideoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DislikeVideoResult) SetSuccess(x interface{}) {
	p.Success = x.(*response.Response)
}

func (p *DislikeVideoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getUserVideosHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(video.GetUserVideosRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(video_service.VideoService).GetUserVideos(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetUserVideosArgs:
		success, err := handler.(video_service.VideoService).GetUserVideos(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserVideosResult)
		realResult.Success = success
	}
	return nil
}
func newGetUserVideosArgs() interface{} {
	return &GetUserVideosArgs{}
}

func newGetUserVideosResult() interface{} {
	return &GetUserVideosResult{}
}

type GetUserVideosArgs struct {
	Req *video.GetUserVideosRequest
}

func (p *GetUserVideosArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetUserVideosArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserVideosArgs) Unmarshal(in []byte) error {
	msg := new(video.GetUserVideosRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserVideosArgs_Req_DEFAULT *video.GetUserVideosRequest

func (p *GetUserVideosArgs) GetReq() *video.GetUserVideosRequest {
	if !p.IsSetReq() {
		return GetUserVideosArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserVideosArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetUserVideosResult struct {
	Success *video.VideoListResponse
}

var GetUserVideosResult_Success_DEFAULT *video.VideoListResponse

func (p *GetUserVideosResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetUserVideosResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserVideosResult) Unmarshal(in []byte) error {
	msg := new(video.VideoListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserVideosResult) GetSuccess() *video.VideoListResponse {
	if !p.IsSetSuccess() {
		return GetUserVideosResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserVideosResult) SetSuccess(x interface{}) {
	p.Success = x.(*video.VideoListResponse)
}

func (p *GetUserVideosResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getUserLikedVideosHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(video.GetUserLikedVideosRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(video_service.VideoService).GetUserLikedVideos(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetUserLikedVideosArgs:
		success, err := handler.(video_service.VideoService).GetUserLikedVideos(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserLikedVideosResult)
		realResult.Success = success
	}
	return nil
}
func newGetUserLikedVideosArgs() interface{} {
	return &GetUserLikedVideosArgs{}
}

func newGetUserLikedVideosResult() interface{} {
	return &GetUserLikedVideosResult{}
}

type GetUserLikedVideosArgs struct {
	Req *video.GetUserLikedVideosRequest
}

func (p *GetUserLikedVideosArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetUserLikedVideosArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserLikedVideosArgs) Unmarshal(in []byte) error {
	msg := new(video.GetUserLikedVideosRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserLikedVideosArgs_Req_DEFAULT *video.GetUserLikedVideosRequest

func (p *GetUserLikedVideosArgs) GetReq() *video.GetUserLikedVideosRequest {
	if !p.IsSetReq() {
		return GetUserLikedVideosArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserLikedVideosArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetUserLikedVideosResult struct {
	Success *video.VideoListResponse
}

var GetUserLikedVideosResult_Success_DEFAULT *video.VideoListResponse

func (p *GetUserLikedVideosResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetUserLikedVideosResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserLikedVideosResult) Unmarshal(in []byte) error {
	msg := new(video.VideoListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserLikedVideosResult) GetSuccess() *video.VideoListResponse {
	if !p.IsSetSuccess() {
		return GetUserLikedVideosResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserLikedVideosResult) SetSuccess(x interface{}) {
	p.Success = x.(*video.VideoListResponse)
}

func (p *GetUserLikedVideosResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) LikeVideo(ctx context.Context, Req *video.LikeVideoRequest) (r *response.Response, err error) {
	var _args LikeVideoArgs
	_args.Req = Req
	var _result LikeVideoResult
	if err = p.c.Call(ctx, "LikeVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DislikeVideo(ctx context.Context, Req *video.DislikeVideoRequest) (r *response.Response, err error) {
	var _args DislikeVideoArgs
	_args.Req = Req
	var _result DislikeVideoResult
	if err = p.c.Call(ctx, "DislikeVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserVideos(ctx context.Context, Req *video.GetUserVideosRequest) (r *video.VideoListResponse, err error) {
	var _args GetUserVideosArgs
	_args.Req = Req
	var _result GetUserVideosResult
	if err = p.c.Call(ctx, "GetUserVideos", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserLikedVideos(ctx context.Context, Req *video.GetUserLikedVideosRequest) (r *video.VideoListResponse, err error) {
	var _args GetUserLikedVideosArgs
	_args.Req = Req
	var _result GetUserLikedVideosResult
	if err = p.c.Call(ctx, "GetUserLikedVideos", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
