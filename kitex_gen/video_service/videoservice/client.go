// Code generated by Kitex v0.3.2. DO NOT EDIT.

package videoservice

import (
	"context"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/callopt"
	"github.com/yunyandz/tiktok-demo-micro/kitex_gen/response"
	"github.com/yunyandz/tiktok-demo-micro/kitex_gen/video"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	LikeVideo(ctx context.Context, Req *video.LikeVideoRequest, callOptions ...callopt.Option) (r *response.Response, err error)
	DislikeVideo(ctx context.Context, Req *video.DislikeVideoRequest, callOptions ...callopt.Option) (r *response.Response, err error)
	GetUserVideos(ctx context.Context, Req *video.GetUserVideosRequest, callOptions ...callopt.Option) (r *video.VideoListResponse, err error)
	GetUserLikedVideos(ctx context.Context, Req *video.GetUserLikedVideosRequest, callOptions ...callopt.Option) (r *video.VideoListResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kVideoServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kVideoServiceClient struct {
	*kClient
}

func (p *kVideoServiceClient) LikeVideo(ctx context.Context, Req *video.LikeVideoRequest, callOptions ...callopt.Option) (r *response.Response, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.LikeVideo(ctx, Req)
}

func (p *kVideoServiceClient) DislikeVideo(ctx context.Context, Req *video.DislikeVideoRequest, callOptions ...callopt.Option) (r *response.Response, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DislikeVideo(ctx, Req)
}

func (p *kVideoServiceClient) GetUserVideos(ctx context.Context, Req *video.GetUserVideosRequest, callOptions ...callopt.Option) (r *video.VideoListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUserVideos(ctx, Req)
}

func (p *kVideoServiceClient) GetUserLikedVideos(ctx context.Context, Req *video.GetUserLikedVideosRequest, callOptions ...callopt.Option) (r *video.VideoListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUserLikedVideos(ctx, Req)
}
