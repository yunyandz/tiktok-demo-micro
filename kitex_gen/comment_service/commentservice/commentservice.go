// Code generated by Kitex v0.3.2. DO NOT EDIT.

package commentservice

import (
	"context"
	"fmt"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/kitex/pkg/streaming"
	"github.com/yunyandz/tiktok-demo-micro/kitex_gen/comment"
	"github.com/yunyandz/tiktok-demo-micro/kitex_gen/comment_service"
	"google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return commentServiceServiceInfo
}

var commentServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "CommentService"
	handlerType := (*comment_service.CommentService)(nil)
	methods := map[string]kitex.MethodInfo{
		"PublishComment": kitex.NewMethodInfo(publishCommentHandler, newPublishCommentArgs, newPublishCommentResult, false),
		"DeleteComment":  kitex.NewMethodInfo(deleteCommentHandler, newDeleteCommentArgs, newDeleteCommentResult, false),
		"GetCommentList": kitex.NewMethodInfo(getCommentListHandler, newGetCommentListArgs, newGetCommentListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "comment_service",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.3.2",
		Extra:           extra,
	}
	return svcInfo
}

func publishCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.PublishCommentRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment_service.CommentService).PublishComment(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *PublishCommentArgs:
		success, err := handler.(comment_service.CommentService).PublishComment(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*PublishCommentResult)
		realResult.Success = success
	}
	return nil
}
func newPublishCommentArgs() interface{} {
	return &PublishCommentArgs{}
}

func newPublishCommentResult() interface{} {
	return &PublishCommentResult{}
}

type PublishCommentArgs struct {
	Req *comment.PublishCommentRequest
}

func (p *PublishCommentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in PublishCommentArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *PublishCommentArgs) Unmarshal(in []byte) error {
	msg := new(comment.PublishCommentRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var PublishCommentArgs_Req_DEFAULT *comment.PublishCommentRequest

func (p *PublishCommentArgs) GetReq() *comment.PublishCommentRequest {
	if !p.IsSetReq() {
		return PublishCommentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *PublishCommentArgs) IsSetReq() bool {
	return p.Req != nil
}

type PublishCommentResult struct {
	Success *comment.CommentActionResponse
}

var PublishCommentResult_Success_DEFAULT *comment.CommentActionResponse

func (p *PublishCommentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in PublishCommentResult")
	}
	return proto.Marshal(p.Success)
}

func (p *PublishCommentResult) Unmarshal(in []byte) error {
	msg := new(comment.CommentActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *PublishCommentResult) GetSuccess() *comment.CommentActionResponse {
	if !p.IsSetSuccess() {
		return PublishCommentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *PublishCommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.CommentActionResponse)
}

func (p *PublishCommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func deleteCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.DeleteCommentRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment_service.CommentService).DeleteComment(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteCommentArgs:
		success, err := handler.(comment_service.CommentService).DeleteComment(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteCommentResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteCommentArgs() interface{} {
	return &DeleteCommentArgs{}
}

func newDeleteCommentResult() interface{} {
	return &DeleteCommentResult{}
}

type DeleteCommentArgs struct {
	Req *comment.DeleteCommentRequest
}

func (p *DeleteCommentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in DeleteCommentArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteCommentArgs) Unmarshal(in []byte) error {
	msg := new(comment.DeleteCommentRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteCommentArgs_Req_DEFAULT *comment.DeleteCommentRequest

func (p *DeleteCommentArgs) GetReq() *comment.DeleteCommentRequest {
	if !p.IsSetReq() {
		return DeleteCommentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteCommentArgs) IsSetReq() bool {
	return p.Req != nil
}

type DeleteCommentResult struct {
	Success *comment.DeleteCommentResponse
}

var DeleteCommentResult_Success_DEFAULT *comment.DeleteCommentResponse

func (p *DeleteCommentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in DeleteCommentResult")
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteCommentResult) Unmarshal(in []byte) error {
	msg := new(comment.DeleteCommentResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteCommentResult) GetSuccess() *comment.DeleteCommentResponse {
	if !p.IsSetSuccess() {
		return DeleteCommentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteCommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.DeleteCommentResponse)
}

func (p *DeleteCommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getCommentListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.GetCommentListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment_service.CommentService).GetCommentList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetCommentListArgs:
		success, err := handler.(comment_service.CommentService).GetCommentList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetCommentListResult)
		realResult.Success = success
	}
	return nil
}
func newGetCommentListArgs() interface{} {
	return &GetCommentListArgs{}
}

func newGetCommentListResult() interface{} {
	return &GetCommentListResult{}
}

type GetCommentListArgs struct {
	Req *comment.GetCommentListRequest
}

func (p *GetCommentListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetCommentListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetCommentListArgs) Unmarshal(in []byte) error {
	msg := new(comment.GetCommentListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetCommentListArgs_Req_DEFAULT *comment.GetCommentListRequest

func (p *GetCommentListArgs) GetReq() *comment.GetCommentListRequest {
	if !p.IsSetReq() {
		return GetCommentListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetCommentListArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetCommentListResult struct {
	Success *comment.GetCommentListResponse
}

var GetCommentListResult_Success_DEFAULT *comment.GetCommentListResponse

func (p *GetCommentListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetCommentListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetCommentListResult) Unmarshal(in []byte) error {
	msg := new(comment.GetCommentListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetCommentListResult) GetSuccess() *comment.GetCommentListResponse {
	if !p.IsSetSuccess() {
		return GetCommentListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetCommentListResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.GetCommentListResponse)
}

func (p *GetCommentListResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) PublishComment(ctx context.Context, Req *comment.PublishCommentRequest) (r *comment.CommentActionResponse, err error) {
	var _args PublishCommentArgs
	_args.Req = Req
	var _result PublishCommentResult
	if err = p.c.Call(ctx, "PublishComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteComment(ctx context.Context, Req *comment.DeleteCommentRequest) (r *comment.DeleteCommentResponse, err error) {
	var _args DeleteCommentArgs
	_args.Req = Req
	var _result DeleteCommentResult
	if err = p.c.Call(ctx, "DeleteComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCommentList(ctx context.Context, Req *comment.GetCommentListRequest) (r *comment.GetCommentListResponse, err error) {
	var _args GetCommentListArgs
	_args.Req = Req
	var _result GetCommentListResult
	if err = p.c.Call(ctx, "GetCommentList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
