// Code generated by Kitex v0.3.2. DO NOT EDIT.

package feedservice

import (
	"context"
	"fmt"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/kitex/pkg/streaming"
	"github.com/yunyandz/tiktok-demo-micro/kitex_gen/feed_service"
	"google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return feedServiceServiceInfo
}

var feedServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "FeedService"
	handlerType := (*feed_service.FeedService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetFeed": kitex.NewMethodInfo(getFeedHandler, newGetFeedArgs, newGetFeedResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "feed_service",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.3.2",
		Extra:           extra,
	}
	return svcInfo
}

func getFeedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(feed_service.FeedRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(feed_service.FeedService).GetFeed(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFeedArgs:
		success, err := handler.(feed_service.FeedService).GetFeed(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFeedResult)
		realResult.Success = success
	}
	return nil
}
func newGetFeedArgs() interface{} {
	return &GetFeedArgs{}
}

func newGetFeedResult() interface{} {
	return &GetFeedResult{}
}

type GetFeedArgs struct {
	Req *feed_service.FeedRequest
}

func (p *GetFeedArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetFeedArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetFeedArgs) Unmarshal(in []byte) error {
	msg := new(feed_service.FeedRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFeedArgs_Req_DEFAULT *feed_service.FeedRequest

func (p *GetFeedArgs) GetReq() *feed_service.FeedRequest {
	if !p.IsSetReq() {
		return GetFeedArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFeedArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetFeedResult struct {
	Success *feed_service.FeedResPonse
}

var GetFeedResult_Success_DEFAULT *feed_service.FeedResPonse

func (p *GetFeedResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetFeedResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetFeedResult) Unmarshal(in []byte) error {
	msg := new(feed_service.FeedResPonse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFeedResult) GetSuccess() *feed_service.FeedResPonse {
	if !p.IsSetSuccess() {
		return GetFeedResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFeedResult) SetSuccess(x interface{}) {
	p.Success = x.(*feed_service.FeedResPonse)
}

func (p *GetFeedResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetFeed(ctx context.Context, Req *feed_service.FeedRequest) (r *feed_service.FeedResPonse, err error) {
	var _args GetFeedArgs
	_args.Req = Req
	var _result GetFeedResult
	if err = p.c.Call(ctx, "GetFeed", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
